#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;
uniform float moveFactor;

const float waveStrength = 0.05;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void) 
{
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0+0.5;

	vec2 reflectTexCoord = vec2(ndc.x, -ndc.y);
	vec2 refractionTexCoord = ndc;

	float near = 0.1;
	float far = 5000.0; // TODO:CW load these from code
	float depth = texture(depthMap, refractionTexCoord).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

	float waterDepth = floorDistance - waterDistance;
	
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth / 20.0, 0.0, 1.0);

	refractionTexCoord += totalDistortion;
	refractionTexCoord = clamp(refractionTexCoord, 0.001, 0.999);
	
	reflectTexCoord += totalDistortion;
	reflectTexCoord.x = clamp(reflectTexCoord.x, 0.001, 0.999);
	reflectTexCoord.y = clamp(reflectTexCoord.y, -0.999, -0.001);
	
	vec4 reflectionColour = texture(reflectionTexture, reflectTexCoord);
	vec4 refractionColour = texture(refractionTexture, refractionTexCoord);
	
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b * 3.0, normalMapColour.g * 2.0 - 1.0);
	normal = normalize(normal);

	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, normal);
	refractiveFactor = clamp(pow(refractiveFactor, 2.5), 0.0, 1.0);

	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth / 10.0, 0.0, 1.0);

	out_Color = mix(reflectionColour, refractionColour, refractiveFactor);
	//out_Color = mix(out_Color, vec4(0,0.15,0.25, 1.0), 0.6);// + vec4(specularHighlights, 0);
	out_Color = mix(out_Color, vec4(0,0.05,0.1, 1.0), 0.6) + vec4(specularHighlights, 0);
	out_Color.a = clamp(waterDepth / 10.0, 0.0, 1.0);
}