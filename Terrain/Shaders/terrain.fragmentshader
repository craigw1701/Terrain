#version 400 core

in vec2 pass_textureCoods;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in vec3 vertexWorldPos;

out vec4 outColour;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void)
{
	vec3 blendMapColour = vec3(0);// texture(blendMap, pass_textureCoods);
	
	{	// Grass
		float y = clamp(1 - (abs(20 - (vertexWorldPos.y )) / 20), 0.0, 0.9);
		blendMapColour += vec3(0, 0, y);
	}
	
	{	// Flowers
		float y = clamp(1 - (abs(20 - (vertexWorldPos.y + 20)) / 20), 0.0, 0.9);
		blendMapColour += vec3(y, 0, 0);
	}
	{	// Mud
		float y = clamp(1 - (abs(30 - (vertexWorldPos.y + 60)) / 30), 0.0, 0.9);
		blendMapColour += vec3(0, y, 0);
	}

	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	if(backTextureAmount < 0)
	{
		blendMapColour = normalize(blendMapColour);
		backTextureAmount = 0;
	}
	vec2 tiledCoords = pass_textureCoods * 40.0f;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * blendMapColour.b;
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * backTextureAmount;

	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

	float rockNormal = pow(1 - dot(surfaceNormal, vec3(0,1,0)), 8);
	totalColour = mix(totalColour, texture(gTexture, tiledCoords), rockNormal);

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);

	float nDot = dot(unitNormal, unitLightVector);

	float brightness = max(nDot, 0.2);
	vec3 diffuse = brightness * lightColour;

	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;

	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.2);

	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;

	outColour = vec4(diffuse, 1) * totalColour + vec4(finalSpecular, 1.0);
}